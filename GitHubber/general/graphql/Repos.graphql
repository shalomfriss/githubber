fragment RepoDetails on Repository {
    object(expression: "master:README.md") {
        ... on Blob {
            text
        }
    }
    name
    description
    stargazers {
        totalCount
    }
    forks {
        totalCount
    }
    primaryLanguage {
        name
    }
    updatedAt
    url
}

query Repos($user: String!){
    repositoryOwner(login:$user) {
        repositories(first: 100, orderBy: { field: CREATED_AT, direction: DESC }) {
            edges {
                node {
                    ...RepoDetails
                }
            }
            pageInfo {
                endCursor
                hasNextPage
            }
        }
    }
}

query ReposContinue($user: String!, $cursor:String!){
    repositoryOwner(login:$user) {
        repositories(first: 100, after: $cursor, orderBy: { field: CREATED_AT, direction: DESC }) {
            edges {
                node {
                    ...RepoDetails
                }
            }
            pageInfo {
                endCursor
                hasNextPage
            }
        }
    }
}



query RepoCount($user: String!) {
    repositoryOwner(login:$user) {
        repositories{
            totalCount
        }
    }
}


query RepoComments($repoName:String!, $owner:String!) {
    repository(name: $repoName, owner: $owner) {
        ref(qualifiedName: "master") {
            target {
                ... on Commit {
                    id
                    history(first: 5) {
                        pageInfo {
                            hasNextPage
                            endCursor
                        }
                        edges {
                            node {
                                messageHeadline
                                oid
                                message
                                author {
                                    name
                                    email
                                    date
                                }
                            }
                        }
                    }

                }
            }
        }
    }
}

